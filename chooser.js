// Generated by CoffeeScript 1.9.2
(function() {
  var Color, Events, TwofaceChooser, TwofacePanels, TwofaceRender,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Events = (function() {
    function Events() {}

    Events.prototype.on = function(name, listener) {
      var base;
      this.__events || (this.__events = {});
      (base = this.__events)[name] || (base[name] = []);
      return this.__events[name].push(listener);
    };

    Events.prototype.off = function(name, listener) {
      if (!(this.__events && this.__events[name])) {
        return;
      }
      return this.__events[name] = this.__events.filter(function(x) {
        return x !== listener;
      });
    };

    Events.prototype.once = function(name, listener) {
      var wrapper;
      wrapper = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          listener.apply(null, args);
          return _this.off(name, wrapper);
        };
      })(this);
      return this.on(name, wrapper);
    };

    Events.prototype.emit = function() {
      var args, i, len, listener, name, ref;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!(this.__events && this.__events[name])) {
        return false;
      }
      ref = this.__events[name];
      for (i = 0, len = ref.length; i < len; i++) {
        listener = ref[i];
        listener.apply(null, args);
      }
      return this.__events[name].length > 0;
    };

    return Events;

  })();

  Color = {
    toRGB: function(cssColor) {
      var m, rgb, s;
      s = document.createElement('span');
      document.body.appendChild(s);
      s.style.backgroundColor = cssColor;
      rgb = getComputedStyle(s).backgroundColor;
      document.body.removeChild(s);
      m = /^rgb\((\d+), (\d+), (\d+)\)$/.exec(rgb);
      if (!m) {
        m = /^rgba\((\d+), (\d+), (\d+), ([\d.]+)\)$/.exec(rgb);
      }
      return [m[1], m[2], m[3], m[4] || 1.0].map(function(x) {
        return parseInt(x);
      });
    },
    equal: function(left, right) {
      return Color.toRGB(left).toString() === Color.toRGB(right).toString();
    },
    toHex: function(input) {
      var b, g, r, ref;
      ref = Color.toRGB(input), r = ref[0], g = ref[1], b = ref[2];
      return "#" + ([r, g, b].map(function(x) {
        return ("00" + (x.toString(16))).slice(-2);
      }).join(''));
    }
  };

  TwofacePanels = (function(superClass) {
    extend(TwofacePanels, superClass);

    function TwofacePanels(render) {
      this.render = render;
      this.tabGroupID = "tabs-" + (Math.random());
      this.color = "#ff0000";
    }

    TwofacePanels.prototype.set = function(address, value) {
      if (this.checks && this.checks[address]) {
        return this.checks[address].prop('checked', !!value);
      }
    };

    TwofacePanels.prototype.serialize = function() {
      var address, check, enabledList, ref;
      enabledList = [];
      ref = this.checks;
      for (address in ref) {
        check = ref[address];
        if (check.prop('checked')) {
          enabledList.push(address);
        }
      }
      enabledList.unshift(this.color);
      return enabledList.join('|');
    };

    TwofacePanels.prototype.load = function(description) {
      var address, check, enabledList, ref;
      enabledList = description.split('|');
      this.color = "#" + enabledList.shift(this.color).replace(/[^a-f0-9]/gi, '');
      if (this.colorPicker) {
        this.colorPicker.setCSS(this.color);
      }
      ref = this.checks;
      for (address in ref) {
        check = ref[address];
        check.prop('checked', enabledList.indexOf(address) !== -1);
      }
      return this.emit("change");
    };

    TwofacePanels.prototype.activateTab = function(section) {
      return this._panel.find('.TF-tabs-group > .TF-tab').each((function(_this) {
        return function(idx, tab) {
          tab = jQuery(tab);
          return tab.toggleClass('active', tab.attr('data-section') === section);
        };
      })(this));
    };

    TwofacePanels.prototype.tabs = function() {
      var section, tabs;
      tabs = (function() {
        var i, len, ref, results;
        ref = this.render.structure;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          section = ref[i];
          results.push(section.name);
        }
        return results;
      }).call(this);
      tabs.unshift("Color");
      return tabs;
    };

    TwofacePanels.prototype.forms = function() {
      var colorForm, form, i, j, len, len1, option, ref, ref1, section, uuid;
      if (this._forms) {
        return this._forms;
      }
      this.checks = {};
      this._forms = [];
      colorForm = jQuery('<div class="TF-tab color-picker" data-section="Color">');
      this.colorPicker = new thistle.Picker(this.color);
      this.colorPicker.on('changed', (function(_this) {
        return function() {
          _this.color = Color.toHex(_this.colorPicker.getCSS());
          return _this.emit("change");
        };
      })(this));
      colorForm.append(this.colorPicker.el);
      this._forms.push(colorForm);
      ref = this.render.structure;
      for (i = 0, len = ref.length; i < len; i++) {
        section = ref[i];
        form = jQuery('<div class="TF-tab">').attr({
          "data-section": section.name
        });
        ref1 = section.options;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          option = ref1[j];
          uuid = "uuid-" + (Math.random());
          form.append(jQuery('<div class="TF-option">').append(this.checks[option.address] = jQuery('<input>').attr({
            'type': {
              choose: 'radio',
              toggle: 'checkbox'
            }[section.mode]
          }).attr({
            'id': uuid
          }).attr({
            'data-address': option.address
          }).attr({
            'name': section.name
          }).change((function(_this) {
            return function(evt) {
              return _this.emit("change");
            };
          })(this)), jQuery('<label>').attr({
            'for': uuid
          }).append(jQuery('<img>').attr('alt', option.name).attr('src', this.render.renderToURI("lightblue|" + option.address)).attr({
            width: 64,
            height: 64
          }))));
        }
        this._forms.push(form);
      }
      return this._forms;
    };

    TwofacePanels.prototype.html = function() {
      var form, i, idx, j, len, len1, ref, ref1, tabTitle, tabs, uuid;
      if (this._panel) {
        return this._panel;
      }
      this._panel = jQuery("<section class='TF-tabs'>");
      ref = this.tabs();
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        tabTitle = ref[idx];
        uuid = "uuid-" + (Math.random());
        this._panel.append(jQuery('<input type=radio>').attr({
          id: uuid,
          name: this.tabGroupID,
          "data-section": tabTitle
        }).change((function(_this) {
          return function(evt) {
            if (evt.target.checked) {
              return _this.activateTab(evt.target.getAttribute('data-section'));
            }
          };
        })(this)).prop('checked', idx === 0), jQuery('<label class="TF-tab">').text(tabTitle).attr({
          "for": uuid
        }));
      }
      this._panel.append(tabs = jQuery('<div class="TF-tabs-group">'));
      ref1 = this.forms();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        form = ref1[j];
        tabs.append(form);
      }
      this.activateTab(this.tabs()[0]);
      return this._panel;
    };

    return TwofacePanels;

  })(Events);

  TwofaceChooser = (function(superClass) {
    extend(TwofaceChooser, superClass);

    function TwofaceChooser(svgdom) {
      this.root = jQuery('<div class="TF-chooser">').append(this.previewImage = jQuery('<img class="preview">'));
      this.render = new TwofaceRender(svgdom);
      this.panels = new TwofacePanels(this.render);
      this.panels.on("change", (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          _this.previewImage.attr({
            src: _this.render.renderToURI(_this.panels.serialize())
          });
          return _this.emit.apply(_this, ["change"].concat(slice.call(args)));
        };
      })(this));
      this.root.append(this.panels.html());
    }

    TwofaceChooser.prototype.load = function(string) {
      return this.panels.load(string);
    };

    TwofaceChooser.prototype.serialize = function() {
      return this.panels.serialize();
    };

    TwofaceChooser.prototype.html = function() {
      return this.root;
    };

    return TwofaceChooser;

  })(Events);

  TwofaceRender = (function() {
    function TwofaceRender(template) {
      var mode, name, node, section;
      this.svgdom = template.cloneNode(true);
      this.serializer = new XMLSerializer;
      this.structure = (function() {
        var i, len, ref, ref1, results;
        ref = this.svgdom.querySelectorAll('svg > g[id*="~"]');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          section = ref[i];
          ref1 = section.id.split('~'), name = ref1[0], mode = ref1[1];
          results.push({
            name: name,
            mode: mode,
            options: (function() {
              var j, len1, ref2, results1;
              ref2 = section.childNodes;
              results1 = [];
              for (j = 0, len1 = ref2.length; j < len1; j++) {
                node = ref2[j];
                if (node.id) {
                  results1.push({
                    name: node.id,
                    address: name + ">" + node.id
                  });
                }
              }
              return results1;
            })()
          });
        }
        return results;
      }).call(this);
    }

    TwofaceRender.prototype.render = function(configString) {
      var address, color, element, enabledList, i, instance, j, len, len1, node, ref, ref1;
      enabledList = configString.split('|');
      color = enabledList.shift();
      instance = this.svgdom.cloneNode(true);
      ref = instance.querySelectorAll('svg > g[id*="~"] > *');
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        address = (element.parentNode.id.split('~')[0]) + ">" + element.id;
        if (enabledList.indexOf(address) === -1) {
          element.parentNode.removeChild(element);
        }
      }
      ref1 = instance.querySelectorAll('svg *');
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        node = ref1[j];
        if (!(node && node.style)) {
          continue;
        }
        if (Color.equal(node.style.fill, "#000000")) {
          node.style.fill = color;
        }
        if (Color.equal(node.style.stroke, "#000000")) {
          node.style.stroke = color;
        }
      }
      return instance;
    };

    TwofaceRender.prototype.renderToString = function(configString) {
      return this.serializer.serializeToString(this.render(configString));
    };

    TwofaceRender.prototype.renderToURI = function(configString) {
      var string;
      string = this.renderToString(configString);
      return "data:image/svg+xml;base64," + (btoa(string));
    };

    TwofaceRender.prototype.updateObjectTag = function(object, configString) {
      return object.contentDocument.replaceChild(this.render(configString).lastChild, object.contentDocument.lastChild);
    };

    return TwofaceRender;

  })();

  window.TwofaceRender = TwofaceRender;

  window.TwofaceChooser = TwofaceChooser;

}).call(this);

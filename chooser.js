// Generated by CoffeeScript 1.8.0
(function() {
  var Color, Events, TwofaceChooser, TwofacePanels, TwofaceRender,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Events = (function() {
    function Events() {}

    Events.prototype.on = function(name, listener) {
      var _base;
      this.__events || (this.__events = {});
      (_base = this.__events)[name] || (_base[name] = []);
      return this.__events[name].push(listener);
    };

    Events.prototype.off = function(name, listener) {
      if (!(this.__events && this.__events[name])) {
        return;
      }
      return this.__events[name] = this.__events.filter(function(x) {
        return x !== listener;
      });
    };

    Events.prototype.once = function(name, listener) {
      var wrapper;
      wrapper = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          listener.apply(null, args);
          return _this.off(name, wrapper);
        };
      })(this);
      return this.on(name, wrapper);
    };

    Events.prototype.emit = function() {
      var args, listener, name, _i, _len, _ref;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!(this.__events && this.__events[name])) {
        return false;
      }
      _ref = this.__events[name];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listener.apply(null, args);
      }
      return this.__events[name].length > 0;
    };

    return Events;

  })();

  Color = {
    toRGB: function(cssColor) {
      var m, rgb, s;
      s = document.createElement('span');
      document.body.appendChild(s);
      s.style.backgroundColor = cssColor;
      rgb = getComputedStyle(s).backgroundColor;
      document.body.removeChild(s);
      m = /^rgb\((\d+), (\d+), (\d+)\)$/.exec(rgb);
      if (!m) {
        m = /^rgba\((\d+), (\d+), (\d+), ([\d.]+)\)$/.exec(rgb);
      }
      return [m[0], m[1], m[2], m[3] || 1.0];
    },
    equal: function(left, right) {
      return Color.toRGB(left).toString() === Color.toRGB(right).toString();
    }
  };

  TwofacePanels = (function(_super) {
    __extends(TwofacePanels, _super);

    function TwofacePanels(render) {
      this.render = render;
      this.tabGroupID = "tabs-" + (Math.random());
      this.color = "#ff0000";
    }

    TwofacePanels.prototype.set = function(address, value) {
      if (this.checks && this.checks[address]) {
        return this.checks[address].prop('checked', !!value);
      }
    };

    TwofacePanels.prototype.serialize = function() {
      var address, check, enabledList, _ref;
      enabledList = [];
      _ref = this.checks;
      for (address in _ref) {
        check = _ref[address];
        if (check.prop('checked')) {
          enabledList.push(address);
        }
      }
      enabledList.unshift(this.color);
      return enabledList.join('|');
    };

    TwofacePanels.prototype.load = function(description) {
      var address, check, enabledList, _ref;
      enabledList = description.split('|');
      this.color = "#" + enabledList.shift(this.color).replace(/[^a-f0-9]/gi, '');
      _ref = this.checks;
      for (address in _ref) {
        check = _ref[address];
        check.prop('checked', enabledList.indexOf(address) !== -1);
      }
      return this.emit("change");
    };

    TwofacePanels.prototype.activateTab = function(section) {
      return this._panel.find('.TF-tabs-group > .TF-tab').each((function(_this) {
        return function(idx, tab) {
          tab = jQuery(tab);
          return tab.toggleClass('active', tab.attr('data-section') === section);
        };
      })(this));
    };

    TwofacePanels.prototype.tabs = function() {
      var section, _i, _len, _ref, _results;
      _ref = this.render.structure;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        _results.push(section.name);
      }
      return _results;
    };

    TwofacePanels.prototype.forms = function() {
      var form, option, section, uuid;
      if (this._forms) {
        return this._forms;
      }
      this.checks = {};
      return this._forms = (function() {
        var _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = this.render.structure;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          section = _ref[_i];
          form = jQuery('<div class="TF-tab">').attr({
            "data-section": section.name
          });
          _ref1 = section.options;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            option = _ref1[_j];
            uuid = "uuid-" + (Math.random());
            form.append(jQuery('<div class="TF-option">').append(this.checks[option.address] = jQuery('<input>').attr({
              'type': {
                choose: 'radio',
                toggle: 'checkbox'
              }[section.mode]
            }).attr({
              'id': uuid
            }).attr({
              'data-address': option.address
            }).attr({
              'name': section.name
            }).change((function(_this) {
              return function(evt) {
                return _this.emit("change");
              };
            })(this)), jQuery('<label>').attr({
              'for': uuid
            }).append(jQuery('<img>').attr('alt', option.name).attr('src', this.render.renderToURI("lightblue|" + option.address)).attr({
              width: 64,
              height: 64
            }))));
          }
          _results.push(form);
        }
        return _results;
      }).call(this);
    };

    TwofacePanels.prototype.html = function() {
      var form, idx, tabTitle, tabs, uuid, _i, _j, _len, _len1, _ref, _ref1;
      if (this._panel) {
        return this._panel;
      }
      this._panel = jQuery("<section class='TF-tabs'>");
      _ref = this.tabs();
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        tabTitle = _ref[idx];
        uuid = "uuid-" + (Math.random());
        this._panel.append(jQuery('<input type=radio>').attr({
          id: uuid,
          name: this.tabGroupID,
          "data-section": tabTitle
        }).change((function(_this) {
          return function(evt) {
            if (evt.target.checked) {
              return _this.activateTab(evt.target.getAttribute('data-section'));
            }
          };
        })(this)).prop('checked', idx === 0), jQuery('<label class="TF-tab">').text(tabTitle).attr({
          "for": uuid
        }));
      }
      this._panel.append(tabs = jQuery('<div class="TF-tabs-group">'));
      _ref1 = this.forms();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        form = _ref1[_j];
        tabs.append(form);
      }
      this.activateTab(this.tabs()[0]);
      return this._panel;
    };

    return TwofacePanels;

  })(Events);

  TwofaceChooser = (function(_super) {
    __extends(TwofaceChooser, _super);

    function TwofaceChooser(svgdom) {
      this.root = jQuery('<div class="TF-chooser">').append(this.previewImage = jQuery('<img class="preview">'));
      this.render = new TwofaceRender(svgdom);
      this.panels = new TwofacePanels(this.render);
      this.panels.on("change", (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.previewImage.attr({
            src: _this.render.renderToURI(_this.panels.serialize())
          });
          return _this.emit.apply(_this, ["change"].concat(__slice.call(args)));
        };
      })(this));
      this.root.append(this.panels.html());
    }

    TwofaceChooser.prototype.load = function(string) {
      return this.panels.load(string);
    };

    TwofaceChooser.prototype.serialize = function() {
      return this.panels.serialize();
    };

    TwofaceChooser.prototype.html = function() {
      return this.root;
    };

    return TwofaceChooser;

  })(Events);

  TwofaceRender = (function() {
    function TwofaceRender(template) {
      var mode, name, node, section;
      this.svgdom = template.cloneNode(true);
      this.serializer = new XMLSerializer;
      this.structure = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.svgdom.querySelectorAll('svg > g[id*="~"]');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          section = _ref[_i];
          _ref1 = section.id.split('~'), name = _ref1[0], mode = _ref1[1];
          _results.push({
            name: name,
            mode: mode,
            options: (function() {
              var _j, _len1, _ref2, _results1;
              _ref2 = section.childNodes;
              _results1 = [];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                node = _ref2[_j];
                if (node.id) {
                  _results1.push({
                    name: node.id,
                    address: "" + name + ">" + node.id
                  });
                }
              }
              return _results1;
            })()
          });
        }
        return _results;
      }).call(this);
    }

    TwofaceRender.prototype.render = function(configString) {
      var address, color, element, enabledList, instance, node, _i, _j, _len, _len1, _ref, _ref1;
      enabledList = configString.split('|');
      color = enabledList.shift();
      instance = this.svgdom.cloneNode(true);
      _ref = instance.querySelectorAll('svg > g[id*="~"] > *');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        address = "" + (element.parentNode.id.split('~')[0]) + ">" + element.id;
        if (enabledList.indexOf(address) === -1) {
          element.parentNode.removeChild(element);
        }
      }
      _ref1 = instance.querySelectorAll('svg *');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        node = _ref1[_j];
        if (!(node && node.style)) {
          continue;
        }
        if (Color.equal(node.style.fill, "#000000")) {
          node.style.fill = color;
        }
        if (Color.equal(node.style.stroke, "#000000")) {
          node.style.stroke = color;
        }
      }
      return instance;
    };

    TwofaceRender.prototype.renderToString = function(configString) {
      return this.serializer.serializeToString(this.render(configString));
    };

    TwofaceRender.prototype.renderToURI = function(configString) {
      var string;
      string = this.renderToString(configString);
      return "data:image/svg+xml;base64," + (btoa(string));
    };

    TwofaceRender.prototype.updateObjectTag = function(object, configString) {
      return object.contentDocument.replaceChild(this.render(configString).lastChild, object.contentDocument.lastChild);
    };

    return TwofaceRender;

  })();

  jQuery(function() {
    return jQuery.ajax("future-punk/future-punk.svg", {
      dataType: 'xml',
      success: function(xmldoc) {
        console.log(window.x = xmldoc);
        window.chooser = new TwofaceChooser(xmldoc);
        chooser.load("#abcdef|Outfit>Seifuku|Styles>Odango|Styles>Pony Right|Styles>Pony Left|Hair>Part Center");
        jQuery(document.body).prepend(chooser.html());
        return chooser.on("change", function() {
          var code;
          code = chooser.serialize();
          jQuery('#code').val(code);
          return jQuery('#imgTest').prop('src', chooser.render.renderToURI(code));
        });
      }
    });
  });

}).call(this);
